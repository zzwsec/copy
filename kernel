#!/usr/bin/env bash

# https://www.graalvm.org/latest/reference-manual/ruby/UTF8Locale
if locale -a 2>/dev/null | grep -qiE -m 1 "UTF-8|utf8"; then
    export LANG=en_US.UTF-8
fi
# 环境变量用于在debian或ubuntu操作系统中设置非交互式 (noninteractive) 安装模式
export DEBIAN_FRONTEND=noninteractive
# 设置PATH环境变量
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATH

# 自定义彩色字体
_red() { printf "\033[91m%b\033[0m\n" "$*"; }
_green() { printf "\033[92m%b\033[0m\n" "$*"; }
_yellow() { printf "\033[93m%b\033[0m\n" "$*"; }
_err_msg() { printf "\033[41m\033[1mError\033[0m %b\n" "$*"; }
_suc_msg() { printf "\033[42m\033[1mSuccess\033[0m %b\n" "$*"; }
_info_msg() { printf "\033[43m\033[1mInfo\033[0m %b\n" "$*"; }

# shellcheck disable=SC2034
# 各变量默认值
GITHUB_PROXY='https://files.m.daocloud.io/'
TEMP_DIR='/tmp/kernel'

_exit() {
    local RET_CODE="$?"
    rm -rf "$TEMP_DIR" >/dev/null 2>&1
    exit "$RET_CODE"
}

trap '_exit' SIGINT SIGQUIT SIGTERM EXIT

mkdir -p "$TEMP_DIR" >/dev/null 2>&1

# 分割符
separator() { printf "%-25s\n" "-" | sed 's/\s/-/g'; }

reading() {
    local PROMPT
    PROMPT="$1"
    read -rep "$(_yellow "$PROMPT")" "$2"
}

# 安全清屏函数
clrscr() {
    ( [ -t 1 ] && tput clear 2>/dev/null ) || echo -e "\033[2J\033[H" || clear
}

error_and_exit() {
    _err_msg "$(_red "$@")" >&2; exit 1
}

_exists() {
    local _CMD="$1"
    if type "$_CMD" >/dev/null 2>&1; then return 0
    elif command -v "$_CMD" >/dev/null 2>&1; then return 0
    elif which "$_CMD" >/dev/null 2>&1; then return 0
    else return 1
    fi
}

_is_64bit() {
    if [ "$(getconf WORD_BIT)" = '32' ] && [ "$(getconf LONG_BIT)" = '64' ]; then return 0
    else return 1
    fi
}

pkg_install() {
    for pkg in "$@"; do
        if _exists apt-get; then
            apt-get update
            apt-get install -y -q "$pkg"
        else
            error_and_exit "The package manager is not supported."
        fi
    done
}

pkg_uninstall() {
    for pkg in "$@"; do
        if _exists apt-get; then
            apt-get purge -y "$pkg"
        else
            error_and_exit "The package manager is not supported."
        fi
    done
}

pre_check() {
    if [ "$EUID" -ne 0 ] || [ "$(id -ru)" -ne 0 ]; then
        error_and_exit "This script must be run as root!"
    fi
    if [ -z "$BASH_VERSION" ] || [ "$(basename "$0")" = "sh" ]; then
        error_and_exit "This script needs to be run with bash, not sh!"
    fi
    # if [ "$(cd -P -- "$(dirname -- "$0")" && pwd -P)" != "/root" ]; then
    #     cd /root 2>/dev/null || error_and_exit "Failed to change directory, Check permissions and try again!"
    # fi
    if ! _is_64bit; then
        error_and_exit "Not a 64-bit system, not supported."
    fi
}

os_reboot() {
    local CHOICE
    _yellow "The system needs to reboot."
    reading "Do you want to restart system? (y/n): " CHOICE
    case "$CHOICE" in
        [Yy] | "" ) ( _exists reboot && reboot ) || shutdown -r now ;;
        * ) _yellow "Reboot has been canceled"; exit 0 ;;
    esac
}

os_full() {
    local -a RELEASE_REGEX RELEASE_DISTROS
    RELEASE_REGEX=("almalinux" "alpine" "centos" "debian" "fedora" "red hat|rhel" "rocky" "ubuntu")
    RELEASE_DISTROS=("almalinux" "alpine" "centos" "debian" "fedora" "rhel" "rocky" "ubuntu")

    if [ -s /etc/os-release ]; then
        OS_INFO="$(grep -i '^PRETTY_NAME=' /etc/os-release | awk -F'=' '{print $NF}' | sed 's#"##g')"
    elif [ -x "$(type -p hostnamectl)" ]; then
        OS_INFO="$(hostnamectl | grep -i system | cut -d: -f2 | xargs)"
    elif [ -x "$(type -p lsb_release)" ]; then
        OS_INFO="$(lsb_release -sd 2>/dev/null)"
    elif [ -s /etc/lsb-release ]; then
        OS_INFO="$(grep -i description /etc/lsb-release 2>/dev/null | cut -d \" -f2)"
    elif [ -s /etc/redhat-release ]; then
        OS_INFO="$(grep . /etc/redhat-release)"
    elif [ -s /etc/issue ]; then
        # shellcheck disable=SC1003
        OS_INFO="$(grep . /etc/issue | cut -d '\' -f1 | sed '/^[ ]*$/d')"
    fi
    for release in "${!RELEASE_REGEX[@]}"; do
        [[ "${OS_INFO,,}" =~ ${RELEASE_REGEX[release]} ]] && OS_NAME="${RELEASE_DISTROS[release]}" && break
    done
    [ -z "$OS_NAME" ] && error_and_exit "This Linux distribution is not supported."
}

os_version() {
    local MAIN_VER
    MAIN_VER="$(printf "%s" "$OS_INFO" | grep -oE "[0-9.]+")"
    MAJOR_VER="${MAIN_VER%%.*}"
}

kernel_version() {
    if _exists uname; then KERNEL_VERSION="$(uname -r)"
    elif _exists hostnamectl; then KERNEL_VERSION="$(hostnamectl | sed -n 's/^.*Kernel: Linux //p')"
    else error_and_exit "Command not found."
    fi
}

os_check() {
    local VIRT MIN_VER
    local -a UNSUPPORTED=("docker" "lxc" "openvz")
    if _exists virt-what; then VIRT="$(virt-what 2>/dev/null)"
    elif _exists systemd-detect-virt; then VIRT="$(systemd-detect-virt 2>/dev/null)"
    elif _exists hostnamectl; then VIRT="$(hostnamectl | awk '/Virtualization:/{print $NF}')"
    else error_and_exit "No virtualization detection tool found."
    fi
    for type in "${UNSUPPORTED[@]}"; do
        if [[ "${VIRT,,}" =~ $type ]] || [[ -d "/proc/vz" ]]; then
            error_and_exit "Virtualization method is $type which is not supported."
        fi
    done
    case "$OS_NAME" in
        almalinux | centos | fedora | rhel | rocky ) MIN_VER=7 ;;
        debian ) MIN_VER=8 ;;
        ubuntu ) MIN_VER=16 ;;
        *) error_and_exit "Not supported OS." ;;
    esac
    if [[ -n "$MAJOR_VER" && "$MAJOR_VER" -lt "$MIN_VER" ]]; then
        error_and_exit "Unsupported $OS_NAME version: $MAJOR_VER. Please upgrade to $OS_NAME $MIN_VER or newer."
    fi
}

add_swap() {
    local NEW_SWAP="$1"
    local FSTYPE
    FSTYPE="$(df --output=fstype / | tail -1)"

    if _exists fallocate && [ "$FSTYPE" != "btrfs" ]; then fallocate -l "${NEW_SWAP}M" /swapfile
    elif _exists dd; then dd if=/dev/zero of=/swapfile bs=1M count="$NEW_SWAP" status=none
    else error_and_exit "No fallocate or dd Command"
    fi
    chmod 600 /swapfile
    mkswap /swapfile >/dev/null
    swapon /swapfile
    grep -qF '/swapfile' /etc/fstab || echo '/swapfile swap swap defaults 0 0' >> /etc/fstab
    _suc_msg "$(_green "Swap added: $NEW_SWAP MB")"
}

swap_check() {
    local MEM_TOTAL SWAP_TOTAL
    MEM_TOTAL="$(awk '/MemTotal/ {print $2}' /proc/meminfo)"
    SWAP_TOTAL="$(awk '/SwapTotal/ {print $2}' /proc/meminfo)"
    (( MEM_TOTAL /= 1024, SWAP_TOTAL /= 1024 ))
    (( MEM_TOTAL <= 900 && SWAP_TOTAL == 0 )) && add_swap 1024
}

on_bbr() {
    if grep -qi '^net.core.default_qdisc' /etc/sysctl.conf; then
        grep -qi '^net.core.default_qdisc *= *fq' /etc/sysctl.conf || sed -i 's/^net.core.default_qdisc.*/net.core.default_qdisc = fq/' /etc/sysctl.conf
    else
        echo 'net.core.default_qdisc = fq' >> /etc/sysctl.conf
    fi
    if grep -qi '^net.ipv4.tcp_congestion_control' /etc/sysctl.conf; then
        grep -qi '^net.ipv4.tcp_congestion_control *= *bbr' /etc/sysctl.conf || sed -i 's/^net.ipv4.tcp_congestion_control.*/net.ipv4.tcp_congestion_control = bbr/' /etc/sysctl.conf
    else
        echo 'net.ipv4.tcp_congestion_control = bbr' >> /etc/sysctl.conf
    fi
    if [ "$(sysctl -n net.core.default_qdisc 2>/dev/null)" != "fq" ] || [ "$(sysctl -n net.ipv4.tcp_congestion_control 2>/dev/null)" != "bbr" ]; then
        sysctl -p >/dev/null 2>&1 && _suc_msg "$(_green "BBR enabled.")"
    fi
}

rhel_install() {
    local ELREPO_URL LATEST_VERSION RPM_NAME

    cd "$TEMP_DIR" || error_and_exit "Unable to enter temporary working directory."
    case "$MAJOR_VER" in
        7 )
            [[ ! "$(uname -m 2>/dev/null)" =~ ^(x86_64|amd64)$ ]] && error_and_exit "Current architecture: $(uname -m) is not supported."
            ELREPO_URL="http://mirrors.coreix.net/elrepo-archive-archive/kernel/el7/x86_64/RPMS"
            LATEST_VERSION="$(curl -fskL --retry 2 "$ELREPO_URL" | grep -oP 'kernel-ml(-devel)?-\K[0-9][^"]+(?=\.el7\.elrepo\.x86_64\.rpm)' | sort -V | uniq -d | tail -n1)"
            for suffix in "" "-devel"; do
                RPM_NAME="kernel-ml$suffix-$LATEST_VERSION.el7.elrepo.x86_64.rpm"
                curl -fLO "$ELREPO_URL/$RPM_NAME"
            done
            yum localinstall -y kernel-ml*
            # 更改内核启动顺序
            grub2-set-default 0 && grub2-mkconfig -o /etc/grub2.cfg
            grubby --args="user_namespace.enable=1" --update-kernel="$(grubby --default-kernel)"
            rm -f kernel-ml*
        ;;
        8 | 9 )
            dnf -y install epel-release
            # 导入ELRepo GPG公钥
            rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
            dnf -y install "https://www.elrepo.org/elrepo-release-$MAJOR_VER.el$MAJOR_VER.elrepo.noarch.rpm"
            dnf -y install --nogpgcheck --enablerepo=elrepo-kernel kernel-ml kernel-ml-devel
        ;;
        *)
            error_and_exit "Unsupported system version."
        ;;
    esac
    on_bbr
    os_reboot
}

# 红帽系发行版交互菜单
rhel_menu() {
    local CHOICE KERNELS
    if echo "$KERNEL_VERSION" | grep -qi 'elrepo'; then
        _green 'ELRepo kernel detected.'
        echo "Current kernel: $KERNEL_VERSION"
        echo
        _yellow 'Kernel Management'
        separator
        echo '1. Update ELRepo kernel'
        echo '2. Uninstall ELRepo kernel'
        separator
        reading 'Enter your choice: ' CHOICE
        KERNELS="$(rpm -qa | while read -r pkg; do [[ $pkg == *kernel* && $pkg == *elrepo* ]] && echo "$pkg"; done)"
        case "$CHOICE" in
            1) 
                yum remove -y elrepo-release
                ([ -n "$KERNELS" ] && rpm -ev --nodeps "$KERNELS"); rhel_install
            ;;
            2) 
                yum remove -y elrepo-release
                ([ -n "$KERNELS" ] && rpm -ev --nodeps "$KERNELS"); \
                _suc_msg "$(_green 'ELRepo kernel uninstalled. Takes effect after reboot.')"; os_reboot
            ;;
            *) 
               _red 'Invalid selection.'
            ;;
        esac
    else
        separator
        _red 'Please back up your data. Linux kernel will be upgraded.'
        _yellow 'Kernel upgrade may improve performance and security. Recommended for testing, use caution in production.'
        separator
        reading 'Proceed with upgrade? (y/n): ' CHOICE
        case "$CHOICE" in
            [Yy]| "") rhel_install ;;
            [Nn]) _yellow 'Cancelled by user.'; exit 0 ;;
            *) error_and_exit 'Invalid selection' ;;
        esac
    fi
}

kernel() {
    clrscr
    pre_check
    os_full
    os_version
    kernel_version
    os_check
    swap_check
    [[ "$OS_NAME" =~ ^(almalinux|centos|fedora|rhel|rocky)$ ]] && rhel_menu
}

kernel
